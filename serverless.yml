service: bootcamp-room-reservation-api

plugins:
  - serverless-offline
  - serverless-esbuild

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1
  environment:
    PRIVATE_KEY: mHlL8LkJK7KmBd45TKl1
    USER_TABLE: ${self:service}-user-${sls:stage}
    ROOM_TABLE: ${self:service}-room-${sls:stage}
    RESERVATION_TABLE: ${self:service}-reservation-${sls:stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"

functions:
  authorizerJWT:
    handler: src/lambdas/authentication.checkAuthentication
  login:
    handler: src/lambdas/authentication.login
    events:
      - http:
          method: POST
          path: /authentication/login
          cors: true
  createUser:
    handler: src/lambdas/user.create
    events:
      - http:
          method: POST
          path: /user
          cors: true
  # createRoom:
  #   handler: src/lambdas/room.create
  #   events:
  #     - http:
  #         method: POST
  #         path: /room
  #         authorizer:
  #           name: authorizerJWT
  # listRoom:
  #   handler: src/lambdas/room.list
  #   events:
  #     - http:
  #         method: GET
  #         path: /room
  #         authorizer:
  #           name: authorizerJWT
  updateRoom:
    handler: src/lambdas/room.update
    events:
      - http:
          method: PUT
          path: /room/{id}
          cors: true
          authorizer:
            name: authorizerJWT
  updateAvailabilityRoom:
    handler: src/lambdas/room.updateAvailability
    events:
      - http:
          method: PATCH
          path: /room/{id}/availability
          cors: true
          authorizer:
            name: authorizerJWT
  createReservation:
    handler: src/lambdas/reservation.create
    events:
      - http:
          method: POST
          path: /reservation
          cors: true
          authorizer:
            name: authorizerJWT

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ReservationsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.RESERVATION_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: DateIndex
            KeySchema:
              - AttributeName: date
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    RoomsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.ROOM_TABLE}
        AttributeDefinitions:
          - AttributeName: _id
            AttributeType: S
        KeySchema:
          - AttributeName: _id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
